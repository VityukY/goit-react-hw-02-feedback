{"version":3,"sources":["components/feedback/styles.module.css","components/feedback/Section.js","components/feedback/ControlsFeedback.js","components/feedback/Statistics.js","components/feedback/Notification.js","App.jsx","index.js"],"names":["module","exports","Section","children","ControlsFeedback","incrementGoodCounter","incrementNeutralCounter","incrementBadCounter","className","styles","buttonList","type","onClick","Statistics","good","neutral","bad","total","percentage","statList","Notification","message","notification","App","state","props","initialGood","initialNeutral","initialBad","setState","prevState","counterTotalFeedback","countPositiveFeedbackPercentage","toFixed","title","this","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,WAAa,2BAA2B,aAAe,6BAA6B,MAAQ,wB,mICE/FC,EAHC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAO,kCAAUA,K,gBC2BLC,EA1BU,SAAC,GAInB,IAHJC,EAGG,EAHHA,qBACAC,EAEG,EAFHA,wBACAC,EACG,EADHA,oBAEA,OACG,qBAAIC,UAAWC,IAAOC,WAAtB,UACG,6BACG,wBAAQC,KAAK,SAASC,QAASP,EAA/B,oBAIH,6BACG,wBAAQM,KAAK,SAASC,QAASN,EAA/B,uBAIH,6BACG,wBAAQK,KAAK,SAASC,QAASL,EAA/B,uBCNGM,EAZI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC9C,OACG,qBAAIV,UAAWC,IAAOU,SAAtB,UACG,yCAAYL,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,qDAAuC,QAAfC,EAAuB,IAAMA,EAArD,WCJME,EAHM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OAAO,qBAAIb,UAAWC,IAAOa,aAAtB,cAAsCD,EAAtC,QCKJE,G,iNAOHC,MAAQ,CACLV,KAAM,EAAKW,MAAMC,YACjBX,QAAS,EAAKU,MAAME,eACpBX,IAAK,EAAKS,MAAMG,Y,EAGnBvB,qBAAuB,WACpB,EAAKwB,UAAS,SAAAC,GACX,MAAO,CACJhB,KAAMgB,EAAUhB,KAAO,O,EAIhCR,wBAA0B,WACvB,EAAKuB,UAAS,SAAAC,GACX,MAAO,CACJf,QAASe,EAAUf,QAAU,O,EAItCR,oBAAsB,WACnB,EAAKsB,UAAS,SAAAC,GACX,MAAO,CACJd,IAAKc,EAAUd,IAAM,O,EAI9Be,qBAAuB,WACpB,OAAO,EAAKP,MAAMV,KAAO,EAAKU,MAAMT,QAAU,EAAKS,MAAMR,K,EAE5DgB,gCAAkC,WAI/B,OAHa,EAAKR,MAAMV,KACV,EAAKiB,uBACiB,KAClBE,QAAQ,I,4CAG7B,WACG,OACG,gCACG,eAAC,EAAD,WACG,oBAAIzB,UAAWC,IAAOyB,MAAtB,mCACA,cAAC,EAAD,CACG7B,qBAAsB8B,KAAK9B,qBAC3BC,wBAAyB6B,KAAK7B,wBAC9BC,oBAAqB4B,KAAK5B,yBAGhC,eAAC,EAAD,WACG,oBAAIC,UAAWC,IAAOyB,MAAtB,wBACiC,IAAhCC,KAAKJ,uBACH,cAAC,EAAD,CAAcV,QAAQ,sBAEtB,cAAC,EAAD,CACGP,KAAMqB,KAAKX,MAAMV,KACjBC,QAASoB,KAAKX,MAAMT,QACpBC,IAAKmB,KAAKX,MAAMR,IAChBC,MAAOkB,KAAKJ,uBACZb,WAAYiB,KAAKH,8C,GAjEpBI,cAAZb,EACIc,aAAe,CACnBX,YAAa,EACbC,eAAgB,EAChBC,WAAY,GAsEHL,Q,MC5Efe,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.a796a4be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonList\":\"styles_buttonList__fL4Y7\",\"notification\":\"styles_notification__1R3Re\",\"title\":\"styles_title__Nq5Ig\"};","const Section = ({ children }) => {\r\n   return <section>{children}</section>;\r\n};\r\nexport default Section;\r\n","import styles from './styles.module.css';\r\n\r\nconst ControlsFeedback = ({\r\n   incrementGoodCounter,\r\n   incrementNeutralCounter,\r\n   incrementBadCounter,\r\n}) => {\r\n   return (\r\n      <ul className={styles.buttonList}>\r\n         <li>\r\n            <button type=\"button\" onClick={incrementGoodCounter}>\r\n               Good\r\n            </button>\r\n         </li>\r\n         <li>\r\n            <button type=\"button\" onClick={incrementNeutralCounter}>\r\n               Neutral\r\n            </button>\r\n         </li>\r\n         <li>\r\n            <button type=\"button\" onClick={incrementBadCounter}>\r\n               Bad\r\n            </button>\r\n         </li>\r\n      </ul>\r\n   );\r\n};\r\n\r\nexport default ControlsFeedback;\r\n","import styles from './styles.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percentage }) => {\r\n   return (\r\n      <ul className={styles.statList}>\r\n         <li> Good: {good}</li>\r\n         <li> Neutral: {neutral}</li>\r\n         <li> Bad: {bad}</li>\r\n         <li> Total: {total}</li>\r\n         <li>Positive feedback: {percentage === 'NaN' ? '0' : percentage}%</li>\r\n      </ul>\r\n   );\r\n};\r\n\r\nexport default Statistics;\r\n","import styles from './styles.module.css';\r\n\r\nconst Notification = ({ message }) => {\r\n   return <h2 className={styles.notification}> {message} </h2>;\r\n};\r\nexport default Notification;\r\n","import { Component } from 'react';\nimport Section from './components/feedback/Section';\nimport ControlsFeedback from './components/feedback/ControlsFeedback';\nimport Statistics from './components/feedback/Statistics';\nimport Notification from './components/feedback/Notification';\nimport styles from './components/feedback/styles.module.css';\nimport 'modern-normalize/modern-normalize.css';\n\nclass App extends Component {\n   static defaultProps = {\n      initialGood: 0,\n      initialNeutral: 0,\n      initialBad: 0,\n   };\n\n   state = {\n      good: this.props.initialGood,\n      neutral: this.props.initialNeutral,\n      bad: this.props.initialBad,\n   };\n\n   incrementGoodCounter = () => {\n      this.setState(prevState => {\n         return {\n            good: prevState.good + 1,\n         };\n      });\n   };\n   incrementNeutralCounter = () => {\n      this.setState(prevState => {\n         return {\n            neutral: prevState.neutral + 1,\n         };\n      });\n   };\n   incrementBadCounter = () => {\n      this.setState(prevState => {\n         return {\n            bad: prevState.bad + 1,\n         };\n      });\n   };\n   counterTotalFeedback = () => {\n      return this.state.good + this.state.neutral + this.state.bad;\n   };\n   countPositiveFeedbackPercentage = () => {\n      const good = this.state.good;\n      const total = this.counterTotalFeedback();\n      const percentage = (good / total) * 100;\n      return percentage.toFixed(2);\n   };\n\n   render() {\n      return (\n         <div>\n            <Section>\n               <h1 className={styles.title} >Please leave feedback</h1>\n               <ControlsFeedback\n                  incrementGoodCounter={this.incrementGoodCounter}\n                  incrementNeutralCounter={this.incrementNeutralCounter}\n                  incrementBadCounter={this.incrementBadCounter}\n               />\n            </Section>\n            <Section>\n               <h2 className={styles.title}>Statistics</h2>\n               {this.counterTotalFeedback() === 0 ? (\n                  <Notification message=\"No feedback given\" />\n               ) : (\n                  <Statistics\n                     good={this.state.good}\n                     neutral={this.state.neutral}\n                     bad={this.state.bad}\n                     total={this.counterTotalFeedback()}\n                     percentage={this.countPositiveFeedbackPercentage()}\n                  />\n               )}\n            </Section>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../src/styles.css';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n"],"sourceRoot":""}